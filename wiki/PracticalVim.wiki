== 第 1 章  *Vim解决问题的方式* ==

===tip1 认识 . 命令===

	`.`命令可以让我们重复上次的修改，他是Vim中最为强大的多面手。
    
	这是Vim区分模式的编辑模型如此高效的核心原因，究竟什么是修改？
	
	`x`命令会删除光标下的字符，再次使用`.`命令“重复上次修改”时，就会删除光标下的字符。`u`命令撤销上次的修改。
	
	`dd`命令删除整行。 
	
	`>G`命令会增加当前行到文档末尾处的缩进层级。
	
	*注意：* 从进入INSERT模式那一刻（输入`i`），直到返回NORMAL模式为止（输入`<Esc>`），Vim会记录每一个按键操作，从`i`到`<Esc>`。做出这样一个修改后再用`.`命令，将会重新执行这一系列按键操作。
	
	`.`命令是一个微内宏（macro）。

===tip2 不要自我重复===

	`a`在当前光标之后添加内容，`A`在当前行结尾添加内容，`$`移动到当前行结尾。那么在当前行结尾处添加冒号：`$a:<Esc>`，若要在下一行重复操作`j$.`。也就是说，`.`封装了`a;<Esc>`，当然也可以使用`A;<Esc>`。
	
	| 复合命令 | 等效的长命令 |
	|----------|--------------|
	| `C`      | `c$`         |
	| `s`      | `cl`         |
	| `S`      | `^C`         |
	| `l`      | `^i`         |
	| `A`      | `$a`         |
	| `o`      | `A<CR>`      |
	| `O`      | `ko`         |
	             
	以上命令都有个共同的特点，它们都会从普通模式切换到插入模式。
	
===tip3 以退为进===

{{{
 var foo = 'method("+argument+")';
}}}

	如果要在上述代码中+号前后各加一个空格，可采用下述方法。
	# `f+` ：查找下一处指定字符出现的位置。`f{char}`
	# `s_+_<Esc>` ：`s`先删除光标下字符，然后进入插入模式；`_`表示空格。这时`.`命令会记录该动作。
	# `;` ：重复上一次`f`命令所查找的字符。
	# `.` ：重复第二步。

	以上，先后退一小步删除字符，然后前进三步，这样的好处是能够使用范式`.`。
	
===tip4 执行、重复、回退===

	| 目的                     | 操作                 | 重复 | 回退 |
	|--------------------------|----------------------|------|------|
	| 做出一个修改             | {edit}               | `.`  | `u`  |
	| 在行内查找下一指定字符   | `f{char}`/`t{char}`  | `;`  | `,`  |
	| 在行内查找上一个字符     | `F{char}`/`T{char}`  | `;`  | `,`  |
	| 在文档中查找下一处匹配项 | /pattern`<CR>`       | `n`  | `N`  |
	| 在文档中查找上一处匹配项 | ?pattern`<CR>`       | `n`  | `N`  |
	| 执行替换                 | :s/target/replacment | `&`  | `u`  |
	| 执行一系列修改           | `qx{changes}q`       | `@x` | `u`  |
	
===tip5 查找并手动替换===

	如果想用单词copy替换content，可用如下命令
	
{{{
 :%s/content/copy/g
}}}
	
	但是这会替换所有的content，如果我们只要替换其中的一些怎么办？
	
	偷懒的办法：`*`命令，查找当前光标下的单词，如果要高亮显示，设置:set hls。配合`cw`命令会删除从光标位置到单词结尾间的字符，并进入插入模式，接下来输入单词copy就可以了。Vim会把离开插入模式之前的全部按键操作都记录下来，因此整个`cw``copy<Esc>`会被当成一个修改。
	
	如果要继续修改下一处的content，只需按键`n.`即可完成操作。
	
===tip6 认识`.`范式===

	到目前位置，介绍了三个简单的编辑任务，尽管每个问题都不一样，不过都找到了用`.`命令解决该问题的方法，下面做一个总结。
	# 在tip2中，先用`A;<Esc>`修改了第一步，再用`j.`重复操作。
	# 在tip3中，先用`f+`跳到目标字符上，然后用`s`命令修改，最后用`;.`重复操作。
	# 在tip5中，先用`*`查找目标单词，然后用`cw`修改，最后用`n.`重复操作。
	
	*理想模式：用一键移动，另一键执行*
	
==第二章 普通模式==

===tip7 停顿时请移开画笔===

	字面意思。
	
===tip8 把撤销单元切成块===

	`u`键会触发撤销命令，它会撤销最新的修改，我们可以控制撤销的粒度。
	
	一次修改包括：在普通模式、可视模式以及命令行中所触发的命令；也包括在插入模式中修改文本，即`i{insert some text}<Esc>`是一次修改。
	
	控制好对`<Esc>`键的使用，就可以将撤销命令作用与单词、句子和段落。
	
	*注：* 在插入模式中移动光标会重置修改状态。如果在插入模式中使用了<Up>、<Down>、<Left>或<Right>这些光标键，将会产生一个新的撤销块。可以看作是先切回了普通模式，然后用h，j，k或l命令对光标进行了移动。
	
===tip9 构造可重复的修改===

	在下例中，假设光标位于行尾处的字符“h”上，而我们想要删除单词“nigh”：
	
{{{
 The end is nigh
}}}

	*反向删除*
	`db`命令删除从光标起始位置到单词开头的位置，但会留下当前光标到词尾的字母“h”。
	`x`键删除光标下的字符。
	高尔夫得分是3分，此时`.`=`x`。
	
	*正向删除*
	`b`命令把光标移到单词开头。
	`dw`命令删除整个单词。
	高尔夫得分是3分，此时`.`=`dw`，但是只删除从当前光标到下一个单词之前的字符。
	
	*删除整个单词*
	`daw`命令，解读为“delete a word”，`aw`是文本对象（text object），而不是动作命令。
	高尔夫得分是3分，此时`.`=`daw`。
	
	可见要完成一件事，总是有不止一种方法，而最好的方法就是按键次数最少（又名VimGolf）。在上述例子中，`daw`命令为获胜者。
	
===tip10 用次数做简单的算数运算===

	`<C-a>`和`<C-x>`命令分别对数字执行加和减的操作。在不带次数执行时，他们会逐个加减。
	
	例如，如果把一个光标移到字符5上，执行`<C-a>`就会把它变成15。
	
	如果光标不在数字上，`<C-a>`命令会“把当前光标之上或之后的数值加上[count]”。
	
	_注：在Vim中，任意以0开头的数字解释为八进制。可设置_`set nrformats=`_，则Vim会把所有数字都当成十进制。_
	
===tip11 能够重复，就别用次数===

	假设在缓冲区里有如下文字。
	
{{{
 Delete more than one word
}}}

	光标在字母m上。现在想删除“more than”这两个单词，可以采取以下三种方法：
	# `d2w`动作命令，解读为“删除两个单词”。
	# `2dw`动作命令，解读为“做两次删除单词的操作”。
	# `dw.`命令，解读为“删除一个单词，重复上次的操作”。
	
	根据我们的讨论，在执行动作时出现错误的情况下，能够更好的恢复到初始状态，则需要具有更细的粒度。因此，在绝大多数情况下选择第三种操作方式。
	
	在什么情况下使用次数更好呢？在上述例子中如果要改为“Delete that one word”，也就是说在删除后还要进行编辑，这时`cw`命令是能够进入编辑模式的，而`.`命令不可以。于是，采用次数的方式更加有利。
	
===tip12 双剑合壁，天下无敌===

	*操作符 + 动作命令 = 操作*
	
	`d{motion}`命令可以对一个字符`dw`、一个完整单词`daw`或一整个段落`dap`进行操作，它作用的范围由动作命令决定。`c{motion}`、`y{motion}`以及其他一些命令也类似，统称为 *操作符operator* 。可用:h operator查阅。
	
	额外规则，当一个操作符命令被连续调用两次时，它会作用于当前行。
	
	| 操作符命令 | 用途                               |
	|------------|------------------------------------|
	| `c`        | 修改                               |
	| `d`        | 删除                               |
	| `y`        | 复制到寄存器                       |
	| `g~`       | 反转大小写                         |
	| `gu`       | 转换为小写                         |
	| `gU`       | 转换为大写                         |
	| `>`        | 增加缩进                           |
	| `<`        | 减小缩进                           |
	| `=`        | 自动缩进                           |
	| `!`        | 使用外部程序过滤{motion}所跨越的行 |
	
	*操作符待决模式*
	
	除了普通、插入及可视模式外，Vim还有操作符待决模式（operator-pending mode）。例如，在执行命令`dw`时，就会激活该模式，这一模式只在按d及w键之间的短暂时间间隔内存在。当操作符待决模式被激活时，也可以使用<Esc>中止该操作，返回到普通模式。
	
	很多命令都由两个或更多的按键来调用，如`gu`等。在大多数情况下，头一个按键只是第二个按键的前缀，这些命令不会激活操作符待决模式。可以把它们当成命名空间（namespace），用来扩充可用命令数目。
	
	命名空间命令的存在意义？能够创建自定义映射项来激活或终止操作符待决模式。
	
	_注：扩展命令插间 tpopt/vim-commentary_
